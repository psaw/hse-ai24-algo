# import os
# import sys

# path = os.path.dirname(os.path.abspath(__file__))
# sys.stdin = open(path + "/input1.txt", "r")


def solve(n: int) -> int:
    """На вершине лесенки, содержащей N ступенек, находится мячик, который начинает
    прыгать по ним вниз, к основанию. Мячик может прыгнуть на следующую ступеньку, 
    на ступеньку через одну или через 2. (То есть, если мячик лежит на 8-ой ступеньке,
    то он может переместиться на 5-ую, 6-ую или 7-ую.) 
    
    Определить число всевозможных "маршрутов" мячика с вершины на землю.

    Args:
        n:   Число ступенек 0 < N < 31

    Returns:
        Количество маршрутов.

    Решение:
    Динамическое программирование (от 0 до N).
    Для очередной ступеньки (ячейка массива dp) считаем число всевозможных маршрутов,
    откуда можно попасть в эту ступеньку.
    Как считаем:
    - для текущей ступеньки смотрим откуда в нее можно было попасть 
    - суммируем число маршрутов до этих ступеней => 
    - сохраняем как число маршрутов до текущей ступени
    - переходим на следующую
    
    Базовt значения:
    dp[0] = 1 маршрут если остались на вершине (условность)
    dp[1] = 1 маршрут на первую ступень: 0->1
    dp[2] = 2 маршрута до 2: 0->2, 0->1->2
    dp[3] = 4 маршрута до 3: 0->3, 0->1->3, 0->2->3, 0->1->2->3
    
    dp[4] = dp[1] + dp[2] + dp[3] = 7

    dp[i] = dp[i-3] + dp[i-2] + dp[i-1]

    0  1  2  3  4  5  6  7  8  9   ...
    1  1  2  4  7  13 24 44 81 149 ...

    Это "числа трибоначчи".
    """

    dp = [0] * (n+1)
    
    for i in range(n+1):
        if i == 0 or i == 1:
            dp[i] = 1
        elif i == 2:
            dp[i] = 2
        else:
            dp[i] = dp[i-3] + dp[i-2] + dp[i-1]
    
    return dp[n]


N = int(input())

print(solve(N))
