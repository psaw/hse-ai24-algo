import os
import sys


path = os.path.dirname(os.path.abspath(__file__))
sys.stdin = open(path + "/input1.txt", "r")


def solve(n: int, m: int, c: list[list[int]]) -> int:
    """Дана прямоугольная доска N × M (N строк и M столбцов).
    В левом верхнем углу находится шахматный конь, которого необходимо
    переместить в правый нижний угол доски. При этом конь может ходить ТОЛЬКО
    - на две клетки вниз и на одну клетку вправо, либо
    - на две клетки вправо и на одну клетку вниз.

    Необходимо определить, сколько существует различных маршрутов,
    ведущих из левого верхнего в правый нижний угол.

    ### Решение:
    Динамическое программирование.
    Сохраняем в таблице стоимость прихода в конкретную точку.
    """

    dp = [[0 for _ in range(m)] for _ in range(n)]

    # начальная точка тоже имеет стоимость
    dp[0][0] = c[0][0]

    # стоимости для первого столбца
    for i in range(1, n):
        dp[i][0] = dp[i - 1][0] + c[i][0]

    # стоимости для первой строки
    for j in range(1, m):
        dp[0][j] = dp[0][j - 1] + c[0][j]

    # вычисление стоимости остальных точек
    for i in range(1, n):
        for j in range(1, m):
            dp[i][j] = c[i][j] + min(dp[i][j - 1], dp[i - 1][j])

    return dp[n - 1][m - 1]


N, M = map(int, input().split())
cost = []
for _ in range(N):
    cost.append(list(map(int, input().split())))

print(solve(N, M, cost))
