yy, xx = map(lambda x: int(x), input().split())

m = []
for _ in range(yy):
    m.append(list([int(x) for x in input().split()]))

print(m)
smax = 1 # искомый макс размер квадрата. 1 гарантировано есть

"""
Идея:
Проходим сверху-вниз (y) и слева-направо (x) и вычисляем
максимальный размер квадратной подматрицы из "1",
которая ЗАКАНЧИВАЕТСЯ на элементе m[y][x].

Для первого ряда и первого столбца:
Макс. размер равен значению самого элемента, т.к. это
либо 0, тогда тут не заканчивается подматрица,
либо 1, тогда этот элемент и есть подматрица размера 1.

Для последующих элементов (со второго ряда и второго столбца):
Если элемент m[y][x] == 1, тогда
а) он может являться правым нижним углом подматрицы, и
б) размер подматрицы равен
   min(m[y-1][x-1], m[y-1][x], m[y][x-1]) + 1
т.е. - минимум из трех размеров выше и левее и плюс 1 (он сам)

Перезаписываем это значение в элемент m[y][x] и идем дальше.

Попутно отслеживаем максимальное значение, которое записали,
чтобы потом не искать его повторно.
"""
for y in range(1, yy):
    for x in range(1, xx):
        if m[y][x] == 1:
            m[y][x] = min(m[y-1][x-1], m[y-1][x], m[y][x-1]) + 1
        smax = max(smax, m[y][x])

print(smax)
print(m)